#labels Featured,Phase-Support
= Getting Started =

Download the *jsh.7z* package and unpack, and you will see the following directory structure.
{{{
jsh
│ JSH.js
│ JSH.hta
│ index.htm
│ panel.htm
│ Blank_HTML.htm
│ Blank_HTML4.htm
├─bin
│   System.js
│   WebAutomation.js
├─cxx
│   main.cpp
│   main.exe
│   makefile
│   resource.js
│   resources.rc
└─lib
    Base64.js
    Intermezzo.js
    LZW.js
    Prelude.js
    Tartarus.js
    URI.js
    UTF16.js
    UTF8.js
}}}

=== Run in browser ===
The simple way is to open *index.htm* locally in your favorite browser and play with it. However, in order to use script injection and many network related features, you may want to host the entire *jsh* folder on a web server.<br>
Once you are done, you will see something similar as illustrated below.<br>
Now there are three panels, click the *Runtime Library* link, which is the last item in the left panel, and you will see a prompt at the right panel as illustrated, now you can type in javascript expressions and statements and see the result.<br>
<br>
<img src="http://jsh.googlecode.com/files/tutorial1.png" /><br>
*Needle (bookmark)* can be saved as a bookmark and used on other web pages, this is done by injecting javascript code to current web page. Note that when *index.htm* is opened locally, *Needle (bookmark)* may not work due to browser security policy.<br>
If you are running locally and using Internet Explorer, the browser may show an information bar asking if the active content should be executed depending on your browser security policy.<br>

=== Run in Windows HTA ===
If your operating system is Windows based, you may start directly by double clicking the *JSH.hta* file icon, this would bring you an HTA based shell.<br>
<img src="http://jsh.googlecode.com/files/jsh_hta.png" /><br>

=== Run in Windows console ===
If your operating system is Windows based, you can run *JSH.js* in console using *cscript.exe /nologo <JSH.js file path>*, for example:
{{{
cscript.exe /nologo D:\WWW\JSH.js
}}}
In order to run *JSH.js* without having to type *cscript.exe /nologo* each time, you can change the default scripting host by the following command:
{{{
wscript.exe //H:CScript
}}}
This would allow you to run *JSH.js* directly either by double clicking the JSH.js file icon, or by typing {{{JSH.js}}} directly as illustrated below.<br>
(if you are too lazy to type in the *.js*, you may add *.js* to the PATHEXT environment variable, then you just need to type the three letter *JSH*...)
<img src="http://jsh.googlecode.com/files/jsh_win32console.png" /><br>

= Advanced Topic =

=== Script injection ===

=== Taking arguments (Windows HTA and console) ===
Create a file named _hello.js_ as follows
{{{
var print = Tartarus.print;

print("Hello, world!");
print(Prelude.format('Arguments: %r', __builtins__.Environment.Arguments));
print(Prelude.format('LibraryPath: %s', __builtins__.Environment.LibraryPath));
print(Prelude.format('StartupDirectory: %s', __builtins__.Environment.StartupDirectory));
}}}
Then run {{{JSH.js hello.js a b c}}} under command prompt to see the result.<br>
You may also run {{{JSH.hta hello.js a b c}}} to see the result in HTA window.<br>

=== Windows console stdin/stdout redirection ===