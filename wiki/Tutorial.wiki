#labels Featured,Phase-Support
= Getting Started =

Download the *jsh.7z* package and unpack, and you will see the following directory structure.
{{{
jsh
│ JSH.js
│ JSH.hta
│ index.htm
│ panel.htm
│ Blank_HTML.htm
│ Blank_HTML4.htm
├─bin
│   System.js
│   WebAutomation.js
├─cxx
│   main.cpp
│   main.exe
│   makefile
│   resource.js
│   resources.rc
└─lib
    Base64.js
    Intermezzo.js
    LZW.js
    Prelude.js
    Tartarus.js
    URI.js
    UTF16.js
    UTF8.js
}}}

=== Run in browser ===
The simple way is to open *index.htm* locally in your favorite browser and play with it. However, in order to use script injection and many network related features, you may want to host the entire *jsh* folder on a web server.<br>
Once you are done, you will see something similar as illustrated below.<br>
Now there are three panels, click the *Runtime Library* link, which is the last item in the left panel, and you will see a prompt at the right panel as illustrated, now you can type in javascript expressions and statements and see the result.<br>
Three meta commands are supported, *{{{.cls}}}* would clear the output, *{{{.history}}}* would show the command history, and *{{{.wrap}}}* would toggle the line wrapping mode.<br>
You may also use the up and down arrow key to navigate through the command history.<br>
<br>
<img src="http://jsh.googlecode.com/files/tutorial1.png" /><br>
*Needle (bookmark)* can be saved as a bookmark and used on other web pages, this is done by injecting javascript code to current web page. Note that when _index.htm_ is opened locally, _Needle (bookmark)_ may not work due to browser security policy.<br>
If you are running locally and using Internet Explorer, the browser may show an information bar asking if the active content should be executed depending on your browser security policy.<br>

=== Run in Windows HTA ===
If your operating system is Windows based, you may start directly by double clicking the *JSH.hta* file icon, this would bring you an HTA based shell.<br>
<img src="http://jsh.googlecode.com/files/jsh_hta.png" /><br>

=== Run in Windows console ===
If your operating system is Windows based, you can run *JSH.js* in console using *{{{cscript.exe /nologo <JSH.js file path>}}}*, for example:
{{{
cscript.exe /nologo D:\WWW\JSH.js
}}}
In order to run _JSH.js_ without having to type _cscript.exe /nologo_ each time, you can change the default scripting host by the following command:
{{{
wscript.exe //H:CScript
}}}
This would allow you to run _JSH.js_ directly either by double clicking the JSH.js file icon, or by typing {{{JSH.js}}} directly as illustrated below.<br>
(if you are too lazy to type in the *.js*, you may add _.js_ to the PATHEXT environment variable, then you just need to type the three letter *JSH*...)
<img src="http://jsh.googlecode.com/files/jsh_win32console.png" /><br>

= Advanced Topic =

=== Script injection ===
Script injection can be achieved in two ways.<br>
The first way is to deploy *jsh* on a web server, bookmark the *Needle (bookmark)* and run it on targeted web pages.<br>
The second way is only available for Trident on Windows platform, by using the *main.exe* application (C++ source available), this would give you the ability to inject script to Trident engine based applications, such like Windows SDK Help, MSN Live Messenger, Outlook Express, etc.<br>

=== Taking arguments (Windows HTA and console) ===
Create a file named _hello.js_ as follows
{{{
var print = Tartarus.print;

print("Hello, world!");
print(Prelude.format('Arguments: %r', __builtins__.Environment.Arguments));
print(Prelude.format('LibraryPath: %s', __builtins__.Environment.LibraryPath));
print(Prelude.format('StartupDirectory: %s', __builtins__.Environment.StartupDirectory));
}}}
Then run *{{{JSH.js hello.js a b c}}}* under command prompt to see the result.<br>
You may also run *{{{JSH.hta hello.js a b c}}}* to see the result in HTA window.<br>

=== Windows console stdin/stdout redirection ===
If you are facing problems while trying to use JSH for stdin/stdout redirection, consult this link [http://support.microsoft.com/kb/321788].<br>
For example, if we want to create a script for automating HTTP request, we can create a script named _{{{HttpClient.js}}}_
{{{
Tartarus.load(
	__builtins__.Runtime('lib/Intermezzo.js'),
function(){
	var method = 'GET', URL, xmlHttpReq = Intermezzo.XMLHttpRequest();
	switch(__builtins__.Environment.Arguments.length){
	case 2:
		URL = __builtins__.Environment.Arguments[1];
		break;
	case 3:
		method = __builtins__.Environment.Arguments[1];
		URL = __builtins__.Environment.Arguments[2];
		break;
	default:
		Tartarus.print(Prelude.format('Usage: %s [GET | POST] <URL>' , __builtins__.Environment.Arguments[0]));
		exit();
	}
	xmlHttpReq.open(method, URL, false);
	xmlHttpReq.send(method === 'POST' ? __builtins__.Environment.StdIn.ReadAll() : undefined);
	Tartarus.print(xmlHttpReq.responseText);
});
}}}
Then it is possible to use command like:<br>
*{{{JSH.js HttpClient.js POST http://google.com < postdata.txt}}}*<br>
*{{{JSH.js HttpClient.js GET http://google.com > result.txt}}}*<br>
*{{{echo hello | JSH.js HttpClient.js POST http://google.com}}}*<br>